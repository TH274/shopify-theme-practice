{% schema %}
{
  "name": "t:sections.most-popular.name",
  "tag": "section",
  "class": "section-most-popular",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "t:sections.most-popular.settings.title",
      "default": "t:sections.most-popular.settings.default"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "t:sections.bamboozld.collection"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 4,
      "max": 12,
      "step": 1,
      "default": 4,
      "label": "t:sections.bamboozld.range"
    },
    {
      "type": "select",
      "id": "layout",
      "label": "t:sections.bamboozld.layout.label",
      "options": [
        {
          "value": "grid",
          "label": "t:sections.bamboozld.layout.option_1.label"
        },
        {
          "value": "slider",
          "label": "t:sections.bamboozld.layout.option_2.label"
        }
      ],
      "default": "slider"
    },

    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "t:sections.bamboozld.checkbox.option_2.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_wishlist",
      "label": "t:sections.bamboozld.checkbox.option_4.label",
      "default": true
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Padding top",
      "default": 60
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Padding bottom",
      "default": 60
    }
  ],
  "presets": [
    {
      "name": "t:sections.most-popular.presets.name",
      "category": "t:sections.most-popular.presets.category"
    }
  ]
}
{% endschema %}

<div class="most-popular-section" style="padding-top: {{ section.settings.padding_top }}px; padding-bottom: {{ section.settings.padding_bottom }}px;">
  <div class="most-popular-container">
    <h2 class="section-title">{{ section.settings.title }}</h2>
  </div>
  
  <div class="most-popular-slider {% if section.settings.layout == 'grid' %}most-popular-grid{% endif %}">
    <div class="slider-nav slider-prev">
      <button class="slider-btn prev-btn" aria-label="Previous slide">
        {% render 'icon-arrow-left' %}
      </button>
    </div>
    
    <div class="product-container">
      {% if section.settings.collection != blank %}
        {% assign collection = collections[section.settings.collection] %}
      {% else %}
        {% assign collection = collections.featured-collection %}
      {% endif %}
      
      {% for product in collection.products limit: section.settings.products_to_show %}
        <div class="product-card">
          <div class="product-image-wrapper">
            <a href="{{ product.url }}" class="product-link">
              {% if product.featured_image %}
              <img 
                src="{{ product.featured_image | img_url: '400x' }}" 
                alt="{{ product.title | escape }}"
                class="product-image"
                loading="lazy"
              >
              {% if section.settings.show_secondary_image and product.images[1] %}
                <img 
                  src="{{ product.images[1] | img_url: '500x' }}" 
                  alt="{{ product.title | escape }}"
                  class="product-image product-image-hover"
                  loading="lazy"
                >
              {% endif %}
            {% else %}
              {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg product-image' }}
            {% endif %}
            </a>

            {% if product.compare_at_price > product.price %}
              <div class="sale-badge">
                <span>On Sale</span>
              </div>
            {% endif %}
            
            {% if product.available == false %}
              <div class="sold-out-badge">
                <span>Sold out</span>
              </div>
            {% endif %}
            
            {% if section.settings.show_wishlist %}
              <button class="wishlist-button" aria-label="Add to wishlist">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 21.35L10.55 20.03C5.4 15.36 2 12.28 2 8.5C2 5.42 4.42 3 7.5 3C9.24 3 10.91 3.81 12 5.09C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.42 22 8.5C22 12.28 18.6 15.36 13.45 20.03L12 21.35Z" stroke="currentColor" stroke-width="1.5" fill="none"/>
                </svg>
              </button>
            {% endif %}
          </div>
          
          <div class="product-info">
            <h3 class="product-title">{{ product.title }}</h3>
            <div class="product-price">
              {% if product.compare_at_price > product.price %}
                <span class="regular-price">{{ product.price | money }}</span>
                <span class="compare-price">{{ product.compare_at_price | money }}</span>
              {% else %}
                <span class="regular-price">{{ product.price | money }}</span>
              {% endif %}
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
    
    <div class="slider-nav slider-next">
      <button class="slider-btn next-btn" aria-label="Next slide">
        {% render 'icon-arrow-right' %}
      </button>
    </div>
  </div>
</div>

<style>
  .most-popular-section {
    padding: 60px 0;
    margin: 0 auto;
    max-width: 1400px;
  }
  
  .most-popular-container {
    text-align: center;
    margin-bottom: 40px;
  }
  
  .most-popular-slider {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .product-container {
    display: flex;
    overflow-x: auto;
    scroll-behavior: smooth;
    gap: 20px;
    width: 100%;
    padding: 0 10px;
    -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */
    scrollbar-width: none;  /* Hide scrollbar for Firefox */
  }
  
  /* Hide scrollbar for Chrome, Safari and Opera */
  .product-container::-webkit-scrollbar {
    display: none;
  }
  
  .most-popular-grid .product-container {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    overflow: visible;
    gap: 20px;
  }
  
  .product-card {
    position: relative;
    flex: 0 0 calc(25% - 20px);
    min-width: 250px;
    padding-bottom: 20px;
  }
  
  .most-popular-grid .product-card {
    flex: unset;
    min-width: unset;
  }
  
  .product-image-wrapper {
    position: relative;
    margin-bottom: 15px;
    overflow: hidden;
  }
  
  .product-image {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }
  
  .product-image-hover {
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .product-link:hover .product-image {
    transform: scale(1.05);
  }
  
  .product-link:hover .product-image-hover {
    opacity: 1;
  }
  
  .wishlist-button {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2;
    transition: background-color 0.3s ease;
  }
  
  .wishlist-button:hover {
    background: rgba(255, 255, 255, 1);
  }
  
  .product-info {
    padding: 0 10px;
  }
  
  .product-title {
    font-size: 16px;
    margin: 0 0 8px;
    font-weight: 500;
    color: #333;
    text-transform: uppercase;
  }
  
  .product-price {
    display: flex;
    gap: 10px;
    font-size: 15px;
  }
  
  .regular-price {
    font-weight: 600;
  }
  
  .compare-price {
    text-decoration: line-through;
    color: #999;
  }
  
  .product-card .sale-badge, 
  .product-card .sold-out-badge {
    position: absolute;
    top: 10px;
    left: 10px;
    z-index: 2;
    padding: 5px 10px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
  }
  
  .product-card .sale-badge {
    background-color: #e53935;
    color: white;
  }
  
  .product-card .sold-out-badge {
    background-color: #9e9e9e;
    color: white;
  }

  .slider-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    z-index: 2;
    height: 40px;
    width: 40px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .slider-prev {
    left: 10px;
  }
  
  .slider-next {
    right: 10px;
  }
  
  .slider-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #333;
  }
  
  .slider-btn svg {
    width: 20px;
    height: 20px;
  }
  
  .most-popular-grid .slider-nav {
    display: none;
  }
  
  @media screen and (max-width: 990px) {
    .most-popular-grid .product-container {
      grid-template-columns: repeat(3, 1fr);
      gap: 15px;
    }
    
    .product-card {
      flex: 0 0 calc(33.33% - 15px);
      min-width: 220px;
    }
    
    .most-popular-section {
      padding: 50px 15px;
    }
  }
  
  @media screen and (max-width: 768px) {
    .most-popular-section {
      padding: 40px 15px;
    }
    
    .section-title {
      font-size: 24px;
      margin-bottom: 30px;
    }
    
    .most-popular-grid .product-container {
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
    }
    
    .product-card {
      flex: 0 0 calc(50% - 15px);
      min-width: 180px;
      padding-bottom: 15px;
    }
    
    .product-title {
      font-size: 14px;
    }
    
    .product-price {
      font-size: 14px;
    }
    
    .slider-nav {
      height: 36px;
      width: 36px;
    }
  }
  
  @media screen and (max-width: 480px) {
    .most-popular-section {
      padding: 30px 10px;
    }
    
    .section-title {
      font-size: 20px;
      margin-bottom: 25px;
    }
    
    .most-popular-grid .product-container {
      grid-template-columns: repeat(1, 1fr);
    }
    
    .product-card {
      flex: 0 0 calc(100% - 15px);
      min-width: 160px;
    }
    
    .slider-nav {
      height: 32px;
      width: 32px;
    }
    
    .slider-btn svg {
      width: 16px;
      height: 16px;
    }
    
    .wishlist-button {
      width: 32px;
      height: 32px;
    }
    
    .product-card .sale-badge, 
    .product-card .sold-out-badge {
      font-size: 10px;
      padding: 3px 8px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    initMostPopularSlider();
    
    window.addEventListener('resize', debounce(function() {
      initMostPopularSlider();
    }, 250));
    
    function initMostPopularSlider() {
      const sliders = document.querySelectorAll('.most-popular-slider:not(.most-popular-grid)');
      
      sliders.forEach(slider => {
        const container = slider.querySelector('.product-container');
        const prevBtn = slider.querySelector('.prev-btn');
        const nextBtn = slider.querySelector('.next-btn');
        
        if (container && prevBtn && nextBtn) {
          const cards = container.querySelectorAll('.product-card');
          
          if (cards.length === 0) return;
          
          const cardRect = cards[0].getBoundingClientRect();
          const cardWidth = cardRect.width;
          
          const scrollAmount = cardWidth + parseInt(getComputedStyle(container).gap);
          
          updateNavButtons(container, prevBtn, nextBtn);
          
          prevBtn.removeEventListener('click', prevBtnClickHandler);
          nextBtn.removeEventListener('click', nextBtnClickHandler);
          container.removeEventListener('scroll', scrollHandler);
          
          prevBtn.addEventListener('click', prevBtnClickHandler);
          nextBtn.addEventListener('click', nextBtnClickHandler);
          container.addEventListener('scroll', scrollHandler);
          
          setupDragToScroll(container);
          
          function prevBtnClickHandler() {
            container.scrollBy({
              left: -scrollAmount,
              behavior: 'smooth'
            });
          }
          
          function nextBtnClickHandler() {
            container.scrollBy({
              left: scrollAmount,
              behavior: 'smooth'
            });
          }
          
          function scrollHandler() {
            updateNavButtons(container, prevBtn, nextBtn);
          }
        }
      });
    }
    
    function setupDragToScroll(element) {
      let isDown = false;
      let startX;
      let scrollLeft;
      let isDragging = false;

      element.addEventListener('mousedown', (e) => {
        isDown = true;
        element.style.cursor = 'grabbing';
        startX = e.pageX - element.offsetLeft;
        scrollLeft = element.scrollLeft;
        e.preventDefault();
      });

      element.addEventListener('mouseleave', () => {
        isDown = false;
        isDragging = false;
        element.style.cursor = 'grab';
      });

      element.addEventListener('mouseup', (e) => {
        if (isDragging) {
          e.preventDefault();
          e.stopPropagation();
          
          const clickedElement = e.target;
          const closestLink = clickedElement.closest('a');
          if (closestLink) {
            const clickHandler = function(e) {
              e.preventDefault();
              e.stopPropagation();
              closestLink.removeEventListener('click', clickHandler);
            };
            closestLink.addEventListener('click', clickHandler, { once: true });
          }
        }
        
        isDown = false;
        isDragging = false;
        element.style.cursor = 'grab';
      });

      element.addEventListener('mousemove', (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - element.offsetLeft;
        const walk = (x - startX) * 2;
        
        if (Math.abs(walk) > 5) {
          isDragging = true;
        }
        
        element.scrollLeft = scrollLeft - walk;
      });
      
      element.style.cursor = 'grab';
      
      element.addEventListener('touchstart', (e) => {
        isDown = true;
        startX = e.touches[0].pageX - element.offsetLeft;
        scrollLeft = element.scrollLeft;
      }, { passive: true });

      element.addEventListener('touchend', (e) => {
        if (isDragging) {
          const touchTarget = document.elementFromPoint(
            e.changedTouches[0].clientX, 
            e.changedTouches[0].clientY
          );
          
          if (touchTarget) {
            const closestLink = touchTarget.closest('a');
            if (closestLink) {
              e.preventDefault();
              const clickHandler = function(e) {
                e.preventDefault();
                closestLink.removeEventListener('click', clickHandler);
              };
              closestLink.addEventListener('click', clickHandler, { once: true });
            }
          }
        }
        
        isDown = false;
        isDragging = false;
      });

      element.addEventListener('touchmove', (e) => {
        if (!isDown) return;
        const x = e.touches[0].pageX - element.offsetLeft;
        const walk = (x - startX) * 2;
        
        if (Math.abs(walk) > 10) {
          isDragging = true;
        }
        
        element.scrollLeft = scrollLeft - walk;
      }, { passive: true });
    }
    
    function updateNavButtons(container, prevBtn, nextBtn) {
      const scrollLeft = container.scrollLeft;
      const maxScrollLeft = container.scrollWidth - container.clientWidth;
      
      if (scrollLeft <= 0) {
        prevBtn.parentElement.style.opacity = '0.5';
        prevBtn.style.pointerEvents = 'none';
      } else {
        prevBtn.parentElement.style.opacity = '1';
        prevBtn.style.pointerEvents = 'auto';
      }
      
      if (scrollLeft >= maxScrollLeft - 5) {
        nextBtn.parentElement.style.opacity = '0.5';
        nextBtn.style.pointerEvents = 'none';
      } else {
        nextBtn.parentElement.style.opacity = '1';
        nextBtn.style.pointerEvents = 'auto';
      }
    }
    
    function debounce(func, wait) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(function() {
          func.apply(context, args);
        }, wait);
      };
    }
  });
</script> 