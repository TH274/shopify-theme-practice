{% schema %}
{
  "name": "New Arrivals",
  "tag": "section",
  "class": "section-new-arrivals",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "NEW ARRIVALS"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 4,
      "max": 12,
      "step": 1,
      "default": 4,
      "label": "Products to show"
    },
    {
      "type": "select",
      "id": "layout",
      "label": "Layout",
      "options": [
        {
          "value": "grid",
          "label": "Grid"
        },
        {
          "value": "slider",
          "label": "Slider"
        }
      ],
      "default": "slider"
    },
    {
      "type": "select",
      "id": "grid_columns_desktop",
      "label": "Columns on desktop",
      "options": [
        {
          "value": "2",
          "label": "2 columns"
        },
        {
          "value": "3",
          "label": "3 columns"
        },
        {
          "value": "4",
          "label": "4 columns"
        }
      ],
      "default": "4"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "label": "Show second image on hover",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show product vendor",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_new_label",
      "label": "Show 'New Arrival' label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_wishlist",
      "label": "Show wishlist icon",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "New Arrivals",
      "category": "Collection"
    }
  ]
}
{% endschema %}

<div class="new-arrival-section">
  <div class="section-header-arrival">
    <h2 class="section-title">{{ section.settings.title }}</h2>

    <div class="new-arrivals-slider {% if section.settings.layout == 'grid' %}new-arrivals-grid{% endif %}" 
         style="{% if section.settings.layout == 'grid' %}--grid-columns: {{ section.settings.grid_columns_desktop }};{% endif %}">
      <div class="slider-nav slider-prev">
        <button class="slider-btn prev-btn" aria-label="Previous slide">
          {% render 'icon-arrow-left' %}
        </button>
      </div>
    
      <div class="new-arrival-products">
        {% if section.settings.collection != blank %}
          {% assign collection = collections[section.settings.collection] %}
        {% else %}
          {% assign collection = collections.featured-collection %}
        {% endif %}
        
        {% for product in collection.products limit: section.settings.products_to_show %}

          <div class="new-arrival-product-card">
          {% if section.settings.show_new_label %}
            <div class="new-arrival-badge">
              <span>NEW ARRIVAL</span>
            </div>
          {% endif %}

            <div class="product-card-inner">
              <div class="product-image-wrapper">
                <a href="{{ product.url }}" class="product-link">
                  {% if product.featured_image %}
                    <img 
                      src="{{ product.featured_image | img_url: '500x' }}" 
                      alt="{{ product.title | escape }}"
                      class="product-image"
                      loading="lazy"
                    >
                    
                    {% if section.settings.show_secondary_image and product.images[1] %}
                      <img 
                        src="{{ product.images[1] | img_url: '500x' }}" 
                        alt="{{ product.title | escape }}"
                        class="product-image product-image-hover"
                        loading="lazy"
                      >
                    {% endif %}
                  {% else %}
                    {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg product-image' }}
                  {% endif %}
                </a>

                {% if section.settings.show_wishlist %}
                  <button class="wishlist-button" aria-label="Add to wishlist">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M12 21.35L10.55 20.03C5.4 15.36 2 12.28 2 8.5C2 5.42 4.42 3 7.5 3C9.24 3 10.91 3.81 12 5.09C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.42 22 8.5C22 12.28 18.6 15.36 13.45 20.03L12 21.35Z" stroke="currentColor" stroke-width="1.5" fill="none"/>
                    </svg>
                  </button>
                {% endif %}
                
              </div>
              
              <div class="product-info">
                {% if section.settings.show_vendor %}
                  <div class="product-vendor">{{ product.vendor }}</div>
                {% endif %}
                
                <h3 class="product-title">
                  <a href="{{ product.url }}">{{ product.title }}</a>
                </h3>
                
                <div class="product-price">
                  {% if product.compare_at_price > product.price %}
                    <span class="regular-price">{{ product.price | money }}</span>
                    <span class="compare-price">{{ product.compare_at_price | money }}</span>
                  {% else %}
                    <span class="regular-price">{{ product.price | money }}</span>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        {% endfor %}
      </div>

      <div class="slider-nav slider-next">
        <button class="slider-btn next-btn" aria-label="Next slide">
          {% render 'icon-arrow-right' %}
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .new-arrival-section {
    padding: 60px 0;
    margin: 0 auto;
  }
  
  .section-header-arrival {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 70px;
  }
  
  .new-arrivals-slider {
    position: relative;
    display: flex;
    align-items: center;
  }

  .new-arrival-badge {
    position: absolute;
    top: 10px;
    left: 10px;
    z-index: 1;
    background-color: #FF8C00;
    color: white;
    padding: 5px 10px;
    font-size: 12px;
    font-weight: bold;
    text-transform: uppercase;
  }
  
  .new-arrival-products {
    display: flex;
    overflow-x: auto;
    scroll-behavior: smooth;
    gap: 20px;
    width: 100%;
    padding: 0 10px;
    -ms-overflow-style: none; 
    scrollbar-width: none; 
  }
  
  .new-arrival-products::-webkit-scrollbar {
    display: none;
  }
  
  .new-arrivals-grid .new-arrival-products {
    display: grid;
    grid-template-columns: repeat(var(--grid-columns, 4), 1fr);
    overflow: visible;
    gap: 20px;
  }
  
  .new-arrival-product-card {
    position: relative;
    flex: 0 0 calc(25% - 20px);
    min-width: 250px;
    margin-bottom: 20px;
  }
  
  .new-arrivals-grid .new-arrival-product-card {
    flex: unset;
    min-width: unset;
  }
  
  .new-arrival-product-card .product-card-inner {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  
  .new-arrival-product-card .product-image-wrapper {
    position: relative;
    overflow: hidden;
    padding-bottom: 125%; /* 4:5 aspect ratio */
    margin-bottom: 15px;
  }
  
  .new-arrival-product-card .product-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }
  
  .new-arrival-product-card .product-image-hover {
    opacity: 0;
  }
  
  .new-arrival-product-card .product-link:hover .product-image-hover {
    opacity: 1;
  }
  
  .new-arrival-product-card .product-link:hover .product-image:not(.product-image-hover) {
    opacity: 0;
  }
  
  .new-arrival-product-card .product-info {
    padding: 10px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  
  .new-arrival-product-card .product-vendor {
    font-size: 14px;
    color: #777;
    margin-bottom: 5px;
  }
  
  .new-arrival-product-card .product-title {
    font-size: 16px;
    margin: 0 0 8px;
    font-weight: 500;
    line-height: 1.4;
  }
  
  .new-arrival-product-card .product-title a {
    color: #333;
    text-decoration: none;
  }
  
  .new-arrival-product-card .product-title a:hover {
    color: #555;
  }
  
  .new-arrival-product-card .product-price {
    display: flex;
    gap: 10px;
    align-items: center;
    margin-top: auto;
  }
  
  .new-arrival-product-card .regular-price {
    font-weight: 600;
    font-size: 15px;
    color: #333;
  }
  
  .new-arrival-product-card .compare-price {
    text-decoration: line-through;
    color: #999;
    font-size: 14px;
  }
  
  .new-arrival-section .slider-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    z-index: 2;
    height: 40px;
    width: 40px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .new-arrival-section .slider-prev {
    left: 10px;
  }
  
  .new-arrival-section .slider-next {
    right: 10px;
  }
  
  .new-arrival-section .slider-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #333;
  }
  
  .new-arrival-section .slider-btn svg {
    width: 20px;
    height: 20px;
  }
  
  .new-arrivals-grid .slider-nav {
    display: none;
  }
  
  .wishlist-button {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 1;
    transition: background-color 0.3s ease;
  }
  
  .wishlist-button:hover {
    background: rgba(255, 255, 255, 1);
  }
  
  @media screen and (max-width: 989px) {
    .new-arrivals-grid .new-arrival-products {
      grid-template-columns: repeat(3, 1fr);
    }
    
    .new-arrival-product-card {
      flex: 0 0 calc(33.33% - 20px);
    }
  }
  
  @media screen and (max-width: 749px) {
    .new-arrivals-grid .new-arrival-products {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .new-arrival-section .section-title {
      font-size: 28px;
    }
    
    .new-arrival-product-card {
      flex: 0 0 calc(50% - 20px);
    }
  }
  
  @media screen and (max-width: 480px) {
    .new-arrival-section .section-title {
      font-size: 24px;
    }
    
    .new-arrival-product-card {
      min-width: 200px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    initNewArrivalsSlider();
    
    // Re-initialize slider on window resize for better responsiveness
    window.addEventListener('resize', debounce(function() {
      initNewArrivalsSlider();
    }, 250));
    
    function initNewArrivalsSlider() {
      const sliders = document.querySelectorAll('.new-arrivals-slider:not(.new-arrivals-grid)');
      
      sliders.forEach(slider => {
        const container = slider.querySelector('.new-arrival-products');
        const prevBtn = slider.querySelector('.prev-btn');
        const nextBtn = slider.querySelector('.next-btn');
        
        if (container && prevBtn && nextBtn) {
          // Calculate card width (including margins/gap)
          const cards = container.querySelectorAll('.new-arrival-product-card');
          
          if (cards.length === 0) return;
          
          // Get number of visible cards based on container width
          const cardRect = cards[0].getBoundingClientRect();
          const cardWidth = cardRect.width;
          const visibleCards = Math.floor(container.clientWidth / cardWidth);
          
          // Calculate the scroll amount (scroll one card at a time)
          const scrollAmount = cardWidth + parseInt(getComputedStyle(container).gap);
          
          // Handle button visibility
          updateNavButtons(container, prevBtn, nextBtn);
          
          // Remove existing event listeners to avoid duplication
          prevBtn.removeEventListener('click', prevBtnClickHandler);
          nextBtn.removeEventListener('click', nextBtnClickHandler);
          container.removeEventListener('scroll', scrollHandler);
          
          // Set up new event listeners
          prevBtn.addEventListener('click', prevBtnClickHandler);
          nextBtn.addEventListener('click', nextBtnClickHandler);
          container.addEventListener('scroll', scrollHandler);
          
          // Add drag to scroll functionality
          setupDragToScroll(container);
          
          function prevBtnClickHandler() {
            container.scrollBy({
              left: -scrollAmount,
              behavior: 'smooth'
            });
          }
          
          function nextBtnClickHandler() {
            container.scrollBy({
              left: scrollAmount,
              behavior: 'smooth'
            });
          }
          
          function scrollHandler() {
            updateNavButtons(container, prevBtn, nextBtn);
          }
        }
      });
    }
    
    function setupDragToScroll(element) {
      let isDown = false;
      let startX;
      let scrollLeft;

      element.addEventListener('mousedown', (e) => {
        isDown = true;
        element.style.cursor = 'grabbing';
        startX = e.pageX - element.offsetLeft;
        scrollLeft = element.scrollLeft;
        e.preventDefault();
      });

      element.addEventListener('mouseleave', () => {
        isDown = false;
        element.style.cursor = 'grab';
      });

      element.addEventListener('mouseup', () => {
        isDown = false;
        element.style.cursor = 'grab';
      });

      element.addEventListener('mousemove', (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - element.offsetLeft;
        const walk = (x - startX) * 2; // Scroll speed multiplier
        element.scrollLeft = scrollLeft - walk;
      });
      
      // Set initial cursor style
      element.style.cursor = 'grab';
      
      // Add touch support for mobile devices
      element.addEventListener('touchstart', (e) => {
        isDown = true;
        startX = e.touches[0].pageX - element.offsetLeft;
        scrollLeft = element.scrollLeft;
      }, { passive: true });

      element.addEventListener('touchend', () => {
        isDown = false;
      });

      element.addEventListener('touchmove', (e) => {
        if (!isDown) return;
        const x = e.touches[0].pageX - element.offsetLeft;
        const walk = (x - startX) * 2;
        element.scrollLeft = scrollLeft - walk;
      }, { passive: true });
    }
    
    function updateNavButtons(container, prevBtn, nextBtn) {
      const scrollLeft = container.scrollLeft;
      const maxScrollLeft = container.scrollWidth - container.clientWidth;
      
      // Show/hide prev button
      if (scrollLeft <= 0) {
        prevBtn.parentElement.style.opacity = '0.5';
        prevBtn.style.pointerEvents = 'none';
      } else {
        prevBtn.parentElement.style.opacity = '1';
        prevBtn.style.pointerEvents = 'auto';
      }
      
      // Show/hide next button
      if (scrollLeft >= maxScrollLeft - 5) { // 5px threshold for rounding errors
        nextBtn.parentElement.style.opacity = '0.5';
        nextBtn.style.pointerEvents = 'none';
      } else {
        nextBtn.parentElement.style.opacity = '1';
        nextBtn.style.pointerEvents = 'auto';
      }
    }
    
    // Debounce function to prevent too many resize events
    function debounce(func, wait) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(function() {
          func.apply(context, args);
        }, wait);
      };
    }
  });
</script> 