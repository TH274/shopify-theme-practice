{% schema %}
{
  "name": "Customer Reviews",
  "tag": "section",
  "class": "section-customer-reviews",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "WHAT OUR CUSTOMERS ARE SAYING"
    },
    {
      "type": "text",
      "id": "review_count",
      "label": "Total Review Count",
      "default": "1268 Reviews"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Top padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Bottom padding",
      "default": 60
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        {
          "type": "text",
          "id": "customer_name",
          "label": "Customer Name",
          "default": "Happy Customer"
        },
        {
          "type": "textarea",
          "id": "testimonial_text",
          "label": "Testimonial",
          "default": "Super soft and gorgeous pattern - super for an easter present"
        },
        {
          "type": "range",
          "id": "rating",
          "min": 1,
          "max": 5,
          "step": 1,
          "label": "Rating (1-5)",
          "default": 5
        },
        {
          "type": "checkbox",
          "id": "verified_by_shop",
          "label": "Show 'Verified by Shop' badge",
          "default": true
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Customer Reviews",
      "blocks": [
        {
          "type": "testimonial"
        },
        {
          "type": "testimonial"
        },
        {
          "type": "testimonial"
        }
      ]
    }
  ]
}
{% endschema %}

<div class="customer-reviews-section" 
     style="background-color: {{ section.settings.background_color }}; padding-top: {{ section.settings.padding_top }}px; padding-bottom: {{ section.settings.padding_bottom }}px;">
  <div class="customer-reviews-container">
    
    {% if section.settings.title != blank %}
      <div class="section-header-reviews">
        <h2 class="section-title">{{ section.settings.title }}</h2>
        <div class="reviews-rating">
          <div class="rating-stars">
            <span class="star filled">★</span>
            <span class="star filled">★</span>
            <span class="star filled">★</span>
            <span class="star filled">★</span>
            <span class="star filled">★</span>
            <span class="reviews-count">{{ section.settings.review_count }}</span>
          </div>
        </div>
      </div>
    {% endif %}
    
    <div class="reviews-carousel">
      <button class="carousel-arrow carousel-prev" aria-label="Previous reviews">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M15 19L8 12L15 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button> 
      
      <div class="reviews-grid">
        {% for block in section.blocks %}
          {% if block.type == 'testimonial' %}
            <div class="review-card" {{ block.shopify_attributes }}>
              <div class="review-rating">
                {% assign rating = block.settings.rating %}
                {% for i in (1..5) %}
                  <span class="star {% if i <= rating %}filled{% endif %}">★</span>
                {% endfor %}
              </div>
              
              <p class="review-text">{{ block.settings.testimonial_text }}</p>
              
              <div class="review-meta">
                <p class="customer-name">Review by {{ block.settings.customer_name }}</p>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
      
      <button class="carousel-arrow carousel-next" aria-label="Next reviews">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9 5L16 12L9 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
  </div>
</div>

<style>
  .customer-reviews-section {
    width: 100%;
    overflow: hidden;
  }
  
  .customer-reviews-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }
  
  .section-header-reviews {
    text-align: center;
  }
  
  .reviews-rating {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
  }
  
  .rating-stars {
    font-size: 18px;
    color: #FF9E1B;
  }
  
  .reviews-count {
    font-size: 16px;
    color: #555;
  }
  
  .reviews-carousel {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
  }
  
  .carousel-arrow {
    background: transparent;
    border: none;
    cursor: pointer;
    color: #666;
    padding: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.3s ease;
    z-index: 2;
  }
  
  .carousel-arrow:hover {
    color: #333;
  }
  
  .reviews-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 30px;
    width: 100%;
  }
  
  .review-card {
    padding: 25px;
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  
  .review-rating {
    margin-bottom: 15px;
    font-size: 20px;
    color: #FF9E1B;
    display: flex;
    justify-content: center;
  }
  
  .review-text {
    font-size: 16px;
    line-height: 1.5;
    color: #333;
    flex-grow: 1;
    margin: 0 0 20px;
    text-align: center;
  }
  
  .review-meta {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 5px;
  }
  
  .customer-name {
    font-size: 14px;
    color: #666;
    margin: 0;
    text-align: center;
  }
  
  .verified-badge {
    display: flex;
    justify-content: center;
  }
  
  .verified-badge img {
    height: 20px;
    width: auto;
  }
  
  @media screen and (max-width: 991px) {
    .reviews-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .reviews-carousel {
      padding: 0 20px;
    }
  }
  
  @media screen and (max-width: 767px) {
    .section-title {
      font-size: 28px;
    }
    
    .reviews-grid {
      grid-template-columns: 1fr;
    }
    
    .carousel-arrow {
      top: 50%;
      transform: translateY(-50%);
      position: absolute;
    }
    
    .carousel-prev {
      left: 5px;
    }
    
    .carousel-next {
      right: 5px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const reviewsContainer = document.querySelector('.reviews-grid');
    const prevBtn = document.querySelector('.carousel-prev');
    const nextBtn = document.querySelector('.carousel-next');
    
    if (!reviewsContainer || !prevBtn || !nextBtn) return;
    
    // Variables for auto-scrolling
    let autoScrollInterval;
    const autoScrollDelay = 3000; // 3 seconds
    
    // Global function for auto-scrolling that will be determined based on screen size
    let autoScrollHandler = function() {};
    let prevBtnClickHandler, nextBtnClickHandler;
    
    const updateLayout = () => {
      const windowWidth = window.innerWidth;
      const reviewCards = document.querySelectorAll('.review-card');
      
      // Clear existing interval before setting up new handlers
      clearInterval(autoScrollInterval);
      
      // Remove existing event listeners to prevent duplication
      prevBtn.removeEventListener('click', prevBtnClickHandler);
      nextBtn.removeEventListener('click', nextBtnClickHandler);
      
      reviewCards.forEach(card => {
        card.style.display = '';
      });
      
      if (windowWidth <= 767) {
        let currentIndex = 0;
        if (!reviewsContainer.dataset.currentIndex) {
          reviewsContainer.dataset.currentIndex = currentIndex;
        } else {
          currentIndex = parseInt(reviewsContainer.dataset.currentIndex);
        }
        
        reviewCards.forEach((card, index) => {
          if (index !== currentIndex) {
            card.style.display = 'none';
          }
        });
        
        prevBtnClickHandler = function() {
          resetAutoScroll();
          currentIndex = (currentIndex - 1 + reviewCards.length) % reviewCards.length;
          reviewsContainer.dataset.currentIndex = currentIndex;
          
          reviewCards.forEach((card, index) => {
            card.style.display = index === currentIndex ? '' : 'none';
          });
        };
        
        nextBtnClickHandler = function() {
          resetAutoScroll();
          currentIndex = (currentIndex + 1) % reviewCards.length;
          reviewsContainer.dataset.currentIndex = currentIndex;
          
          reviewCards.forEach((card, index) => {
            card.style.display = index === currentIndex ? '' : 'none';
          });
        };
        
        autoScrollHandler = function() {
          currentIndex = (currentIndex + 1) % reviewCards.length;
          reviewsContainer.dataset.currentIndex = currentIndex;
          
          reviewCards.forEach((card, index) => {
            card.style.display = index === currentIndex ? '' : 'none';
          });
        };
        
      } else if (windowWidth <= 991) {
        let currentPairIndex = 0;
        if (!reviewsContainer.dataset.currentPairIndex) {
          reviewsContainer.dataset.currentPairIndex = currentPairIndex;
        } else {
          currentPairIndex = parseInt(reviewsContainer.dataset.currentPairIndex);
        }
        
        const totalPairs = Math.ceil(reviewCards.length / 2);
        
        reviewCards.forEach((card, index) => {
          const pairIndex = Math.floor(index / 2);
          if (pairIndex !== currentPairIndex) {
            card.style.display = 'none';
          }
        });
        
        prevBtnClickHandler = function() {
          resetAutoScroll();
          currentPairIndex = (currentPairIndex - 1 + totalPairs) % totalPairs;
          reviewsContainer.dataset.currentPairIndex = currentPairIndex;
          
          reviewCards.forEach((card, index) => {
            const pairIndex = Math.floor(index / 2);
            card.style.display = pairIndex === currentPairIndex ? '' : 'none';
          });
        };
        
        nextBtnClickHandler = function() {
          resetAutoScroll();
          currentPairIndex = (currentPairIndex + 1) % totalPairs;
          reviewsContainer.dataset.currentPairIndex = currentPairIndex;
          
          reviewCards.forEach((card, index) => {
            const pairIndex = Math.floor(index / 2);
            card.style.display = pairIndex === currentPairIndex ? '' : 'none';
          });
        };
        
        autoScrollHandler = function() {
          currentPairIndex = (currentPairIndex + 1) % totalPairs;
          reviewsContainer.dataset.currentPairIndex = currentPairIndex;
          
          reviewCards.forEach((card, index) => {
            const pairIndex = Math.floor(index / 2);
            card.style.display = pairIndex === currentPairIndex ? '' : 'none';
          });
        };
        
      } else {
        let currentTrioIndex = 0;
        if (!reviewsContainer.dataset.currentTrioIndex) {
          reviewsContainer.dataset.currentTrioIndex = currentTrioIndex;
        } else {
          currentTrioIndex = parseInt(reviewsContainer.dataset.currentTrioIndex);
        }
        
        const totalTrios = Math.ceil(reviewCards.length / 3);
        
        reviewCards.forEach((card, index) => {
          const trioIndex = Math.floor(index / 3);
          if (trioIndex !== currentTrioIndex) {
            card.style.display = 'none';
          }
        });
        
        prevBtnClickHandler = function() {
          resetAutoScroll();
          currentTrioIndex = (currentTrioIndex - 1 + totalTrios) % totalTrios;
          reviewsContainer.dataset.currentTrioIndex = currentTrioIndex;
          
          reviewCards.forEach((card, index) => {
            const trioIndex = Math.floor(index / 3);
            card.style.display = trioIndex === currentTrioIndex ? '' : 'none';
          });
        };
        
        nextBtnClickHandler = function() {
          resetAutoScroll();
          currentTrioIndex = (currentTrioIndex + 1) % totalTrios;
          reviewsContainer.dataset.currentTrioIndex = currentTrioIndex;
          
          reviewCards.forEach((card, index) => {
            const trioIndex = Math.floor(index / 3);
            card.style.display = trioIndex === currentTrioIndex ? '' : 'none';
          });
        };
        
        autoScrollHandler = function() {
          currentTrioIndex = (currentTrioIndex + 1) % totalTrios;
          reviewsContainer.dataset.currentTrioIndex = currentTrioIndex;
          
          reviewCards.forEach((card, index) => {
            const trioIndex = Math.floor(index / 3);
            card.style.display = trioIndex === currentTrioIndex ? '' : 'none';
          });
        };
      }
      
      // Add event listeners after they've been defined
      prevBtn.addEventListener('click', prevBtnClickHandler);
      nextBtn.addEventListener('click', nextBtnClickHandler);
      
      // Setup auto-scrolling
      setupAutoScroll();
    };
    
    // Helper functions for auto-scrolling
    function setupAutoScroll() {
      // Clear any existing interval
      clearInterval(autoScrollInterval);
      // Set new interval
      autoScrollInterval = setInterval(autoScrollHandler, autoScrollDelay);
    }
    
    function resetAutoScroll() {
      // Reset the interval when user manually navigates
      clearInterval(autoScrollInterval);
      autoScrollInterval = setInterval(autoScrollHandler, autoScrollDelay);
    }
    
    // Make reviews container horizontally scrollable on touch devices
    setupDragToScroll(reviewsContainer);
    
    function setupDragToScroll(element) {
      let isDown = false;
      let startX;
      let scrollLeft;
      
      element.style.cursor = 'grab';
      
      element.addEventListener('mousedown', (e) => {
        isDown = true;
        element.style.cursor = 'grabbing';
        startX = e.pageX - element.offsetLeft;
        scrollLeft = element.scrollLeft;
        e.preventDefault();
        
        // Pause auto-scroll when user interacts
        clearInterval(autoScrollInterval);
      });
      
      element.addEventListener('mouseleave', () => {
        isDown = false;
        element.style.cursor = 'grab';
        
        // Resume auto-scroll
        if (autoScrollInterval) clearInterval(autoScrollInterval);
        autoScrollInterval = setInterval(autoScrollHandler, autoScrollDelay);
      });
      
      element.addEventListener('mouseup', () => {
        isDown = false;
        element.style.cursor = 'grab';
        
        // Resume auto-scroll
        if (autoScrollInterval) clearInterval(autoScrollInterval);
        autoScrollInterval = setInterval(autoScrollHandler, autoScrollDelay);
      });
      
      element.addEventListener('mousemove', (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - element.offsetLeft;
        const walk = (x - startX) * 2;
        element.scrollLeft = scrollLeft - walk;
      });
      
      element.addEventListener('touchstart', (e) => {
        isDown = true;
        startX = e.touches[0].pageX - element.offsetLeft;
        scrollLeft = element.scrollLeft;
        
        // Pause auto-scroll when user interacts
        clearInterval(autoScrollInterval);
      }, { passive: true });
      
      element.addEventListener('touchend', () => {
        isDown = false;
        
        if (autoScrollInterval) clearInterval(autoScrollInterval);
        autoScrollInterval = setInterval(autoScrollHandler, autoScrollDelay);
      });
      
      element.addEventListener('touchmove', (e) => {
        if (!isDown) return;
        const x = e.touches[0].pageX - element.offsetLeft;
        const walk = (x - startX) * 2;
        element.scrollLeft = scrollLeft - walk;
      }, { passive: true });
    }
    
    updateLayout();
    
    window.addEventListener('resize', function() {
      clearInterval(autoScrollInterval);
      updateLayout();
    });
    
    document.querySelector('.reviews-carousel').addEventListener('mouseenter', function() {
      clearInterval(autoScrollInterval);
    });
    
    document.querySelector('.reviews-carousel').addEventListener('mouseleave', function() {
      if (autoScrollInterval) clearInterval(autoScrollInterval);
      autoScrollInterval = setInterval(autoScrollHandler, autoScrollDelay);
    });
  });
</script> 
